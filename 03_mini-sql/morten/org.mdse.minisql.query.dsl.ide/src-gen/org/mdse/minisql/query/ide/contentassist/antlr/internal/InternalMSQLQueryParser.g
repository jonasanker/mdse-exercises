/*
 * generated by Xtext 2.20.0
 */
parser grammar InternalMSQLQueryParser;

options {
	tokenVocab=InternalMSQLQueryLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.mdse.minisql.query.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mdse.minisql.query.services.MSQLQueryGrammarAccess;

}
@members {
	private MSQLQueryGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("BY", "'BY'");
		tokenNameToValue.put("ASC", "'ASC'");
		tokenNameToValue.put("DESC", "'DESC'");
		tokenNameToValue.put("FROM", "'FROM'");
		tokenNameToValue.put("ORDER", "'ORDER'");
		tokenNameToValue.put("WHERE", "'WHERE'");
		tokenNameToValue.put("SELECT", "'SELECT'");
	}

	public void setGrammarAccess(MSQLQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleSelectQuery
entryRuleSelectQuery
:
{ before(grammarAccess.getSelectQueryRule()); }
	 ruleSelectQuery
{ after(grammarAccess.getSelectQueryRule()); } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectQueryAccess().getGroup()); }
		(rule__SelectQuery__Group__0)
		{ after(grammarAccess.getSelectQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhatClause
entryRuleWhatClause
:
{ before(grammarAccess.getWhatClauseRule()); }
	 ruleWhatClause
{ after(grammarAccess.getWhatClauseRule()); } 
	 EOF 
;

// Rule WhatClause
ruleWhatClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhatClauseAccess().getGroup()); }
		(rule__WhatClause__Group__0)
		{ after(grammarAccess.getWhatClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhatDirective
entryRuleWhatDirective
:
{ before(grammarAccess.getWhatDirectiveRule()); }
	 ruleWhatDirective
{ after(grammarAccess.getWhatDirectiveRule()); } 
	 EOF 
;

// Rule WhatDirective
ruleWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getAlternatives()); }
		(rule__WhatDirective__Alternatives)
		{ after(grammarAccess.getWhatDirectiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAllColumnsWhatDirective
entryRuleAllColumnsWhatDirective
:
{ before(grammarAccess.getAllColumnsWhatDirectiveRule()); }
	 ruleAllColumnsWhatDirective
{ after(grammarAccess.getAllColumnsWhatDirectiveRule()); } 
	 EOF 
;

// Rule AllColumnsWhatDirective
ruleAllColumnsWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getGroup()); }
		(rule__AllColumnsWhatDirective__Group__0)
		{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleColumnWhatDirective
entryRuleSingleColumnWhatDirective
:
{ before(grammarAccess.getSingleColumnWhatDirectiveRule()); }
	 ruleSingleColumnWhatDirective
{ after(grammarAccess.getSingleColumnWhatDirectiveRule()); } 
	 EOF 
;

// Rule SingleColumnWhatDirective
ruleSingleColumnWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceAssignment()); }
		(rule__SingleColumnWhatDirective__ColumnReferenceAssignment)
		{ after(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFromClause
entryRuleFromClause
:
{ before(grammarAccess.getFromClauseRule()); }
	 ruleFromClause
{ after(grammarAccess.getFromClauseRule()); } 
	 EOF 
;

// Rule FromClause
ruleFromClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromClauseAccess().getGroup()); }
		(rule__FromClause__Group__0)
		{ after(grammarAccess.getFromClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhereClause
entryRuleWhereClause
:
{ before(grammarAccess.getWhereClauseRule()); }
	 ruleWhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
		(rule__WhereClause__Group__0)
		{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparativeExpression
entryRuleComparativeExpression
:
{ before(grammarAccess.getComparativeExpressionRule()); }
	 ruleComparativeExpression
{ after(grammarAccess.getComparativeExpressionRule()); } 
	 EOF 
;

// Rule ComparativeExpression
ruleComparativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparativeExpressionAccess().getGroup()); }
		(rule__ComparativeExpression__Group__0)
		{ after(grammarAccess.getComparativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
		(rule__AtomicExpression__Alternatives)
		{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
		(rule__IntegerLiteral__ValueAssignment)
		{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrderByClause
entryRuleOrderByClause
:
{ before(grammarAccess.getOrderByClauseRule()); }
	 ruleOrderByClause
{ after(grammarAccess.getOrderByClauseRule()); } 
	 EOF 
;

// Rule OrderByClause
ruleOrderByClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getGroup()); }
		(rule__OrderByClause__Group__0)
		{ after(grammarAccess.getOrderByClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrderByDirective
entryRuleOrderByDirective
:
{ before(grammarAccess.getOrderByDirectiveRule()); }
	 ruleOrderByDirective
{ after(grammarAccess.getOrderByDirectiveRule()); } 
	 EOF 
;

// Rule OrderByDirective
ruleOrderByDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getGroup()); }
		(rule__OrderByDirective__Group__0)
		{ after(grammarAccess.getOrderByDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnReference
entryRuleColumnReference
:
{ before(grammarAccess.getColumnReferenceRule()); }
	 ruleColumnReference
{ after(grammarAccess.getColumnReferenceRule()); } 
	 EOF 
;

// Rule ColumnReference
ruleColumnReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnReferenceAccess().getColumnAssignment()); }
		(rule__ColumnReference__ColumnAssignment)
		{ after(grammarAccess.getColumnReferenceAccess().getColumnAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ComparativeOperator
ruleComparativeOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getAlternatives()); }
		(rule__ComparativeOperator__Alternatives)
		{ after(grammarAccess.getComparativeOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatDirective__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getAllColumnsWhatDirectiveParserRuleCall_0()); }
		ruleAllColumnsWhatDirective
		{ after(grammarAccess.getWhatDirectiveAccess().getAllColumnsWhatDirectiveParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getSingleColumnWhatDirectiveParserRuleCall_1()); }
		ruleSingleColumnWhatDirective
		{ after(grammarAccess.getWhatDirectiveAccess().getSingleColumnWhatDirectiveParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getColumnReferenceParserRuleCall_0()); }
		ruleColumnReference
		{ after(grammarAccess.getExpressionAccess().getColumnReferenceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getIntegerLiteralParserRuleCall_1()); }
		ruleIntegerLiteral
		{ after(grammarAccess.getExpressionAccess().getIntegerLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getComparativeExpressionParserRuleCall_2()); }
		ruleComparativeExpression
		{ after(grammarAccess.getExpressionAccess().getComparativeExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getIntegerLiteralParserRuleCall_0()); }
		ruleIntegerLiteral
		{ after(grammarAccess.getAtomicExpressionAccess().getIntegerLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getColumnReferenceParserRuleCall_1()); }
		ruleColumnReference
		{ after(grammarAccess.getAtomicExpressionAccess().getColumnReferenceParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__AscendingAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingASCKeyword_1_0_0()); }
		ASC
		{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingASCKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingDESCKeyword_1_0_1()); }
		DESC
		{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingDESCKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getLESS_THANEnumLiteralDeclaration_0()); }
		(LessThanSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getLESS_THANEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_1()); }
		(LessThanSignEqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getEQUALEnumLiteralDeclaration_2()); }
		(EqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getEQUALEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_3()); }
		(ExclamationMarkEqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4()); }
		(GreaterThanSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5()); }
		(GreaterThanSignEqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__0__Impl
	rule__SelectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
	SELECT
	{ after(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__1__Impl
	rule__SelectQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getWhatClauseAssignment_1()); }
	(rule__SelectQuery__WhatClauseAssignment_1)
	{ after(grammarAccess.getSelectQueryAccess().getWhatClauseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__2__Impl
	rule__SelectQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getFromClauseAssignment_2()); }
	(rule__SelectQuery__FromClauseAssignment_2)
	{ after(grammarAccess.getSelectQueryAccess().getFromClauseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__3__Impl
	rule__SelectQuery__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getWhereClauseAssignment_3()); }
	(rule__SelectQuery__WhereClauseAssignment_3)?
	{ after(grammarAccess.getSelectQueryAccess().getWhereClauseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__4__Impl
	rule__SelectQuery__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getOrderByClauseAssignment_4()); }
	(rule__SelectQuery__OrderByClauseAssignment_4)?
	{ after(grammarAccess.getSelectQueryAccess().getOrderByClauseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_5()); }
	Semicolon
	{ after(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhatClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group__0__Impl
	rule__WhatClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getWhatDirectiveAssignment_0()); }
	(rule__WhatClause__WhatDirectiveAssignment_0)
	{ after(grammarAccess.getWhatClauseAccess().getWhatDirectiveAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getGroup_1()); }
	(rule__WhatClause__Group_1__0)*
	{ after(grammarAccess.getWhatClauseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhatClause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group_1__0__Impl
	rule__WhatClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getWhatClauseAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getWhatDirectiveAssignment_1_1()); }
	(rule__WhatClause__WhatDirectiveAssignment_1_1)
	{ after(grammarAccess.getWhatClauseAccess().getWhatDirectiveAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AllColumnsWhatDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllColumnsWhatDirective__Group__0__Impl
	rule__AllColumnsWhatDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getAsteriskKeyword_0()); }
	Asterisk
	{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllColumnsWhatDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getAllColumnsWhatDirectiveAction_1()); }
	()
	{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getAllColumnsWhatDirectiveAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromClause__Group__0__Impl
	rule__FromClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
	FROM
	{ after(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromClauseAccess().getTableAssignment_1()); }
	(rule__FromClause__TableAssignment_1)
	{ after(grammarAccess.getFromClauseAccess().getTableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__0__Impl
	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
	WHERE
	{ after(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
	(rule__WhereClause__ExpressionAssignment_1)
	{ after(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group__0__Impl
	rule__ComparativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getExpression1Assignment_0()); }
	(rule__ComparativeExpression__Expression1Assignment_0)
	{ after(grammarAccess.getComparativeExpressionAccess().getExpression1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group__1__Impl
	rule__ComparativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getOperatorAssignment_1()); }
	(rule__ComparativeExpression__OperatorAssignment_1)
	{ after(grammarAccess.getComparativeExpressionAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getExpression2Assignment_2()); }
	(rule__ComparativeExpression__Expression2Assignment_2)
	{ after(grammarAccess.getComparativeExpressionAccess().getExpression2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__0__Impl
	rule__OrderByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }
	ORDER
	{ after(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__1__Impl
	rule__OrderByClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }
	BY
	{ after(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__2__Impl
	rule__OrderByClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_2()); }
	(rule__OrderByClause__OrderDirectivesAssignment_2)
	{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
	(rule__OrderByClause__Group_3__0)*
	{ after(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group_3__0__Impl
	rule__OrderByClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_3_1()); }
	(rule__OrderByClause__OrderDirectivesAssignment_3_1)
	{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByDirective__Group__0__Impl
	rule__OrderByDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceAssignment_0()); }
	(rule__OrderByDirective__ColumnReferenceAssignment_0)
	{ after(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingAssignment_1()); }
	(rule__OrderByDirective__AscendingAssignment_1)?
	{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectQuery__WhatClauseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getWhatClauseWhatClauseParserRuleCall_1_0()); }
		ruleWhatClause
		{ after(grammarAccess.getSelectQueryAccess().getWhatClauseWhatClauseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__FromClauseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getFromClauseFromClauseParserRuleCall_2_0()); }
		ruleFromClause
		{ after(grammarAccess.getSelectQueryAccess().getFromClauseFromClauseParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__WhereClauseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getWhereClauseWhereClauseParserRuleCall_3_0()); }
		ruleWhereClause
		{ after(grammarAccess.getSelectQueryAccess().getWhereClauseWhereClauseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__OrderByClauseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getOrderByClauseOrderByClauseParserRuleCall_4_0()); }
		ruleOrderByClause
		{ after(grammarAccess.getSelectQueryAccess().getOrderByClauseOrderByClauseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__WhatDirectiveAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatClauseAccess().getWhatDirectiveWhatDirectiveParserRuleCall_0_0()); }
		ruleWhatDirective
		{ after(grammarAccess.getWhatClauseAccess().getWhatDirectiveWhatDirectiveParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__WhatDirectiveAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatClauseAccess().getWhatDirectiveWhatDirectiveParserRuleCall_1_1_0()); }
		ruleWhatDirective
		{ after(grammarAccess.getWhatClauseAccess().getWhatDirectiveWhatDirectiveParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleColumnWhatDirective__ColumnReferenceAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0()); }
		ruleColumnReference
		{ after(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__TableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromClauseAccess().getTableTableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFromClauseAccess().getTableTableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFromClauseAccess().getTableTableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFromClauseAccess().getTableTableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Expression1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeExpressionAccess().getExpression1AtomicExpressionParserRuleCall_0_0()); }
		ruleAtomicExpression
		{ after(grammarAccess.getComparativeExpressionAccess().getExpression1AtomicExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeExpressionAccess().getOperatorComparativeOperatorEnumRuleCall_1_0()); }
		ruleComparativeOperator
		{ after(grammarAccess.getComparativeExpressionAccess().getOperatorComparativeOperatorEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Expression2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeExpressionAccess().getExpression2AtomicExpressionParserRuleCall_2_0()); }
		ruleAtomicExpression
		{ after(grammarAccess.getComparativeExpressionAccess().getExpression2AtomicExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderDirectivesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderByDirectiveParserRuleCall_2_0()); }
		ruleOrderByDirective
		{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderByDirectiveParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderDirectivesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderByDirectiveParserRuleCall_3_1_0()); }
		ruleOrderByDirective
		{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderByDirectiveParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__ColumnReferenceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0_0()); }
		ruleColumnReference
		{ after(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__AscendingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingAlternatives_1_0()); }
		(rule__OrderByDirective__AscendingAlternatives_1_0)
		{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnReference__ColumnAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0()); }
		(
			{ before(grammarAccess.getColumnReferenceAccess().getColumnColumnIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getColumnReferenceAccess().getColumnColumnIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

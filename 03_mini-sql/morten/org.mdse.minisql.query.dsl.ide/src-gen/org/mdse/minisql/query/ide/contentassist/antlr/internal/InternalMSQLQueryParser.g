/*
 * generated by Xtext 2.20.0
 */
parser grammar InternalMSQLQueryParser;

options {
	tokenVocab=InternalMSQLQueryLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.mdse.minisql.query.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mdse.minisql.query.services.MSQLQueryGrammarAccess;

}
@members {
	private MSQLQueryGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("FROM", "'FROM'");
		tokenNameToValue.put("SELECT", "'SELECT'");
	}

	public void setGrammarAccess(MSQLQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleSelectQuery
entryRuleSelectQuery
:
{ before(grammarAccess.getSelectQueryRule()); }
	 ruleSelectQuery
{ after(grammarAccess.getSelectQueryRule()); } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectQueryAccess().getGroup()); }
		(rule__SelectQuery__Group__0)
		{ after(grammarAccess.getSelectQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__0__Impl
	rule__SelectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
	SELECT
	{ after(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__1__Impl
	rule__SelectQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getWhatAssignment_1()); }
	(rule__SelectQuery__WhatAssignment_1)
	{ after(grammarAccess.getSelectQueryAccess().getWhatAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__2__Impl
	rule__SelectQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getGroup_2()); }
	(rule__SelectQuery__Group_2__0)*
	{ after(grammarAccess.getSelectQueryAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__3__Impl
	rule__SelectQuery__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getFROMKeyword_3()); }
	FROM
	{ after(grammarAccess.getSelectQueryAccess().getFROMKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__4__Impl
	rule__SelectQuery__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getFromAssignment_4()); }
	(rule__SelectQuery__FromAssignment_4)
	{ after(grammarAccess.getSelectQueryAccess().getFromAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_5()); }
	Semicolon
	{ after(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectQuery__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group_2__0__Impl
	rule__SelectQuery__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getSelectQueryAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getWhatAssignment_2_1()); }
	(rule__SelectQuery__WhatAssignment_2_1)
	{ after(grammarAccess.getSelectQueryAccess().getWhatAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectQuery__WhatAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getWhatColumnCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSelectQueryAccess().getWhatColumnIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectQueryAccess().getWhatColumnIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSelectQueryAccess().getWhatColumnCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__WhatAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getWhatColumnCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getSelectQueryAccess().getWhatColumnIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectQueryAccess().getWhatColumnIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getSelectQueryAccess().getWhatColumnCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__FromAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getFromTableCrossReference_4_0()); }
		(
			{ before(grammarAccess.getSelectQueryAccess().getFromTableIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectQueryAccess().getFromTableIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getSelectQueryAccess().getFromTableCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

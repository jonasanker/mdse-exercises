/*
 * generated by Xtext 2.20.0
 */
parser grammar InternalMSQLQueryParser;

options {
	tokenVocab=InternalMSQLQueryLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.mdse.minisql.query.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mdse.minisql.query.services.MSQLQueryGrammarAccess;

}

@members {

 	private MSQLQueryGrammarAccess grammarAccess;

    public InternalMSQLQueryParser(TokenStream input, MSQLQueryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SelectQuery";
   	}

   	@Override
   	protected MSQLQueryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSelectQuery
entryRuleSelectQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectQueryRule()); }
	iv_ruleSelectQuery=ruleSelectQuery
	{ $current=$iv_ruleSelectQuery.current; }
	EOF;

// Rule SelectQuery
ruleSelectQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=SELECT
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectQueryAccess().getSELECTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectQueryAccess().getWhatClauseWhatClauseParserRuleCall_1_0());
				}
				lv_whatClause_1_0=ruleWhatClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectQueryRule());
					}
					add(
						$current,
						"whatClause",
						lv_whatClause_1_0,
						"org.mdse.minisql.query.MSQLQuery.WhatClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectQueryAccess().getFromClauseFromClauseParserRuleCall_2_0());
				}
				lv_fromClause_2_0=ruleFromClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectQueryRule());
					}
					set(
						$current,
						"fromClause",
						lv_fromClause_2_0,
						"org.mdse.minisql.query.MSQLQuery.FromClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Semicolon
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectQueryAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleWhatClause
entryRuleWhatClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhatClauseRule()); }
	iv_ruleWhatClause=ruleWhatClause
	{ $current=$iv_ruleWhatClause.current; }
	EOF;

// Rule WhatClause
ruleWhatClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWhatClauseAccess().getWhatDirectiveSingleColumnWhatDirectiveParserRuleCall_0_0());
				}
				lv_whatDirective_0_0=ruleSingleColumnWhatDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhatClauseRule());
					}
					add(
						$current,
						"whatDirective",
						lv_whatDirective_0_0,
						"org.mdse.minisql.query.MSQLQuery.SingleColumnWhatDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getWhatClauseAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWhatClauseAccess().getWhatDirectiveSingleColumnWhatDirectiveParserRuleCall_1_1_0());
					}
					lv_whatDirective_2_0=ruleSingleColumnWhatDirective
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhatClauseRule());
						}
						add(
							$current,
							"whatDirective",
							lv_whatDirective_2_0,
							"org.mdse.minisql.query.MSQLQuery.SingleColumnWhatDirective");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFromClause
entryRuleFromClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFromClauseRule()); }
	iv_ruleFromClause=ruleFromClause
	{ $current=$iv_ruleFromClause.current; }
	EOF;

// Rule FromClause
ruleFromClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=FROM
		{
			newLeafNode(otherlv_0, grammarAccess.getFromClauseAccess().getFROMKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFromClauseRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFromClauseAccess().getTableTableCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSingleColumnWhatDirective
entryRuleSingleColumnWhatDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleColumnWhatDirectiveRule()); }
	iv_ruleSingleColumnWhatDirective=ruleSingleColumnWhatDirective
	{ $current=$iv_ruleSingleColumnWhatDirective.current; }
	EOF;

// Rule SingleColumnWhatDirective
ruleSingleColumnWhatDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0());
			}
			lv_columnReference_0_0=ruleColumnReference
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSingleColumnWhatDirectiveRule());
				}
				set(
					$current,
					"columnReference",
					lv_columnReference_0_0,
					"org.mdse.minisql.query.MSQLQuery.ColumnReference");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleColumnReference
entryRuleColumnReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnReferenceRule()); }
	iv_ruleColumnReference=ruleColumnReference
	{ $current=$iv_ruleColumnReference.current; }
	EOF;

// Rule ColumnReference
ruleColumnReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getColumnReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0());
			}
		)
	)
;

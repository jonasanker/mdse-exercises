/*
 * generated by Xtext 2.20.0
 */
package org.mdse.minisql.query.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MSQLQueryGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.SelectQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhatClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhatClauseWhatClauseParserRuleCall_1_0 = (RuleCall)cWhatClauseAssignment_1.eContents().get(0);
		private final Assignment cFromClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromClauseFromClauseParserRuleCall_2_0 = (RuleCall)cFromClauseAssignment_2.eContents().get(0);
		private final Assignment cWhereClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_3_0 = (RuleCall)cWhereClauseAssignment_3.eContents().get(0);
		private final Assignment cOrderByClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOrderByClauseOrderByClauseParserRuleCall_4_0 = (RuleCall)cOrderByClauseAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectQuery:
		//	"SELECT"
		//	whatClause+=WhatClause
		//	fromClause=FromClause
		//	whereClause=WhereClause?
		//	orderByClause=OrderByClause?
		//	";";
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" whatClause+=WhatClause fromClause=FromClause whereClause=WhereClause? orderByClause=OrderByClause? ";"
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//whatClause+=WhatClause
		public Assignment getWhatClauseAssignment_1() { return cWhatClauseAssignment_1; }
		
		//WhatClause
		public RuleCall getWhatClauseWhatClauseParserRuleCall_1_0() { return cWhatClauseWhatClauseParserRuleCall_1_0; }
		
		//fromClause=FromClause
		public Assignment getFromClauseAssignment_2() { return cFromClauseAssignment_2; }
		
		//FromClause
		public RuleCall getFromClauseFromClauseParserRuleCall_2_0() { return cFromClauseFromClauseParserRuleCall_2_0; }
		
		//whereClause=WhereClause?
		public Assignment getWhereClauseAssignment_3() { return cWhereClauseAssignment_3; }
		
		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_3_0() { return cWhereClauseWhereClauseParserRuleCall_3_0; }
		
		//orderByClause=OrderByClause?
		public Assignment getOrderByClauseAssignment_4() { return cOrderByClauseAssignment_4; }
		
		//OrderByClause
		public RuleCall getOrderByClauseOrderByClauseParserRuleCall_4_0() { return cOrderByClauseOrderByClauseParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class WhatClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.WhatClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWhatDirectiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWhatDirectiveWhatDirectiveParserRuleCall_0_0 = (RuleCall)cWhatDirectiveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWhatDirectiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWhatDirectiveWhatDirectiveParserRuleCall_1_1_0 = (RuleCall)cWhatDirectiveAssignment_1_1.eContents().get(0);
		
		//WhatClause:
		//	whatDirective+=WhatDirective ("," whatDirective+=WhatDirective)*;
		@Override public ParserRule getRule() { return rule; }
		
		//whatDirective+=WhatDirective ("," whatDirective+=WhatDirective)*
		public Group getGroup() { return cGroup; }
		
		//whatDirective+=WhatDirective
		public Assignment getWhatDirectiveAssignment_0() { return cWhatDirectiveAssignment_0; }
		
		//WhatDirective
		public RuleCall getWhatDirectiveWhatDirectiveParserRuleCall_0_0() { return cWhatDirectiveWhatDirectiveParserRuleCall_0_0; }
		
		//("," whatDirective+=WhatDirective)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//whatDirective+=WhatDirective
		public Assignment getWhatDirectiveAssignment_1_1() { return cWhatDirectiveAssignment_1_1; }
		
		//WhatDirective
		public RuleCall getWhatDirectiveWhatDirectiveParserRuleCall_1_1_0() { return cWhatDirectiveWhatDirectiveParserRuleCall_1_1_0; }
	}
	public class WhatDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.WhatDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllColumnsWhatDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingleColumnWhatDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WhatDirective:
		//	AllColumnsWhatDirective | SingleColumnWhatDirective;
		@Override public ParserRule getRule() { return rule; }
		
		//AllColumnsWhatDirective | SingleColumnWhatDirective
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AllColumnsWhatDirective
		public RuleCall getAllColumnsWhatDirectiveParserRuleCall_0() { return cAllColumnsWhatDirectiveParserRuleCall_0; }
		
		//SingleColumnWhatDirective
		public RuleCall getSingleColumnWhatDirectiveParserRuleCall_1() { return cSingleColumnWhatDirectiveParserRuleCall_1; }
	}
	public class AllColumnsWhatDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.AllColumnsWhatDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAllColumnsWhatDirectiveAction_1 = (Action)cGroup.eContents().get(1);
		
		//// Possibly missing reference in metamodel from AllColumnsWhatDirective->ColumnReference
		//AllColumnsWhatDirective:
		//	"*" {AllColumnsWhatDirective};
		@Override public ParserRule getRule() { return rule; }
		
		//"*" {AllColumnsWhatDirective}
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//{AllColumnsWhatDirective}
		public Action getAllColumnsWhatDirectiveAction_1() { return cAllColumnsWhatDirectiveAction_1; }
	}
	public class SingleColumnWhatDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.SingleColumnWhatDirective");
		private final Assignment cColumnReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cColumnReferenceColumnReferenceParserRuleCall_0 = (RuleCall)cColumnReferenceAssignment.eContents().get(0);
		
		//SingleColumnWhatDirective:
		//	columnReference=ColumnReference;
		@Override public ParserRule getRule() { return rule; }
		
		//columnReference=ColumnReference
		public Assignment getColumnReferenceAssignment() { return cColumnReferenceAssignment; }
		
		//ColumnReference
		public RuleCall getColumnReferenceColumnReferenceParserRuleCall_0() { return cColumnReferenceColumnReferenceParserRuleCall_0; }
	}
	public class FromClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.FromClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTableTableCrossReference_1_0 = (CrossReference)cTableAssignment_1.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_1_0_1 = (RuleCall)cTableTableCrossReference_1_0.eContents().get(1);
		
		//FromClause:
		//	"FROM"
		//	table=[schema::Table];
		@Override public ParserRule getRule() { return rule; }
		
		//"FROM" table=[schema::Table]
		public Group getGroup() { return cGroup; }
		
		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//table=[schema::Table]
		public Assignment getTableAssignment_1() { return cTableAssignment_1; }
		
		//[schema::Table]
		public CrossReference getTableTableCrossReference_1_0() { return cTableTableCrossReference_1_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_1_0_1() { return cTableTableIDTerminalRuleCall_1_0_1; }
	}
	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//WhereClause:
		//	"WHERE" expression+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"WHERE" expression+=Expression
		public Group getGroup() { return cGroup; }
		
		//"WHERE"
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.Expression");
		private final RuleCall cComparativeExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	ComparativeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparativeExpression
		public RuleCall getComparativeExpressionParserRuleCall() { return cComparativeExpressionParserRuleCall; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionExpression1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpression2MultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cExpression2Assignment_1_2.eContents().get(0);
		
		//// Left factoring and grammar actions resolves left-recursion (see slide 147 in 03-exercises)
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({ArithmeticExpression.expression1=current} operator=AdditiveOperator
		//	expression2=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({ArithmeticExpression.expression1=current} operator=AdditiveOperator
		//expression2=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.expression1=current} operator=AdditiveOperator expression2=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.expression1=current}
		public Action getArithmeticExpressionExpression1Action_1_0() { return cArithmeticExpressionExpression1Action_1_0; }
		
		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }
		
		//expression2=MultiplicativeExpression
		public Assignment getExpression2Assignment_1_2() { return cExpression2Assignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getExpression2MultiplicativeExpressionParserRuleCall_1_2_0() { return cExpression2MultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionExpression1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpression2AtomicExpressionParserRuleCall_1_2_0 = (RuleCall)cExpression2Assignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	AtomicExpression ({ArithmeticExpression.expression1=current} operator=MultiplicativeOperator
		//	expression2=AtomicExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicExpression ({ArithmeticExpression.expression1=current} operator=MultiplicativeOperator
		//expression2=AtomicExpression)*
		public Group getGroup() { return cGroup; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_0() { return cAtomicExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.expression1=current} operator=MultiplicativeOperator expression2=AtomicExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.expression1=current}
		public Action getArithmeticExpressionExpression1Action_1_0() { return cArithmeticExpressionExpression1Action_1_0; }
		
		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }
		
		//expression2=AtomicExpression
		public Assignment getExpression2Assignment_1_2() { return cExpression2Assignment_1_2; }
		
		//AtomicExpression
		public RuleCall getExpression2AtomicExpressionParserRuleCall_1_2_0() { return cExpression2AtomicExpressionParserRuleCall_1_2_0; }
	}
	public class ComparativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.ComparativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparativeExpressionExpression1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpression2AdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cExpression2Assignment_1_2.eContents().get(0);
		
		//ComparativeExpression Expression:
		//	AdditiveExpression ({ComparativeExpression.expression1=current} operator=ComparativeOperator
		//	expression2=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({ComparativeExpression.expression1=current} operator=ComparativeOperator
		//expression2=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({ComparativeExpression.expression1=current} operator=ComparativeOperator expression2=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparativeExpression.expression1=current}
		public Action getComparativeExpressionExpression1Action_1_0() { return cComparativeExpressionExpression1Action_1_0; }
		
		//operator=ComparativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ComparativeOperator
		public RuleCall getOperatorComparativeOperatorEnumRuleCall_1_1_0() { return cOperatorComparativeOperatorEnumRuleCall_1_1_0; }
		
		//expression2=AdditiveExpression
		public Assignment getExpression2Assignment_1_2() { return cExpression2Assignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getExpression2AdditiveExpressionParserRuleCall_1_2_0() { return cExpression2AdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColumnReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AtomicExpression Expression:
		//	"(" Expression ")" | IntegerLiteral | ColumnReference;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Expression ")" | IntegerLiteral | ColumnReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }
		
		//ColumnReference
		public RuleCall getColumnReferenceParserRuleCall_2() { return cColumnReferenceParserRuleCall_2; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class OrderByClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.OrderByClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORDERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderDirectivesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderDirectivesOrderByDirectiveParserRuleCall_2_0 = (RuleCall)cOrderDirectivesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOrderDirectivesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOrderDirectivesOrderByDirectiveParserRuleCall_3_1_0 = (RuleCall)cOrderDirectivesAssignment_3_1.eContents().get(0);
		
		//OrderByClause:
		//	"ORDER" "BY"
		//	orderDirectives+=OrderByDirective ("," orderDirectives+=OrderByDirective)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"ORDER" "BY" orderDirectives+=OrderByDirective ("," orderDirectives+=OrderByDirective)*
		public Group getGroup() { return cGroup; }
		
		//"ORDER"
		public Keyword getORDERKeyword_0() { return cORDERKeyword_0; }
		
		//"BY"
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }
		
		//orderDirectives+=OrderByDirective
		public Assignment getOrderDirectivesAssignment_2() { return cOrderDirectivesAssignment_2; }
		
		//OrderByDirective
		public RuleCall getOrderDirectivesOrderByDirectiveParserRuleCall_2_0() { return cOrderDirectivesOrderByDirectiveParserRuleCall_2_0; }
		
		//("," orderDirectives+=OrderByDirective)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//orderDirectives+=OrderByDirective
		public Assignment getOrderDirectivesAssignment_3_1() { return cOrderDirectivesAssignment_3_1; }
		
		//OrderByDirective
		public RuleCall getOrderDirectivesOrderByDirectiveParserRuleCall_3_1_0() { return cOrderDirectivesOrderByDirectiveParserRuleCall_3_1_0; }
	}
	public class OrderByDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.OrderByDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnReferenceColumnReferenceParserRuleCall_0_0 = (RuleCall)cColumnReferenceAssignment_0.eContents().get(0);
		private final Assignment cAscendingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAscendingAlternatives_1_0 = (Alternatives)cAscendingAssignment_1.eContents().get(0);
		private final Keyword cAscendingASCKeyword_1_0_0 = (Keyword)cAscendingAlternatives_1_0.eContents().get(0);
		private final Keyword cAscendingDESCKeyword_1_0_1 = (Keyword)cAscendingAlternatives_1_0.eContents().get(1);
		
		//OrderByDirective:
		//	columnReference+=ColumnReference ascending?=("ASC" | "DESC")? // Boolean syntax
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//columnReference+=ColumnReference ascending?=("ASC" | "DESC")?
		public Group getGroup() { return cGroup; }
		
		//columnReference+=ColumnReference
		public Assignment getColumnReferenceAssignment_0() { return cColumnReferenceAssignment_0; }
		
		//ColumnReference
		public RuleCall getColumnReferenceColumnReferenceParserRuleCall_0_0() { return cColumnReferenceColumnReferenceParserRuleCall_0_0; }
		
		//ascending?=("ASC" | "DESC")?
		public Assignment getAscendingAssignment_1() { return cAscendingAssignment_1; }
		
		//("ASC" | "DESC")
		public Alternatives getAscendingAlternatives_1_0() { return cAscendingAlternatives_1_0; }
		
		//"ASC"
		public Keyword getAscendingASCKeyword_1_0_0() { return cAscendingASCKeyword_1_0_0; }
		
		//"DESC"
		public Keyword getAscendingDESCKeyword_1_0_1() { return cAscendingDESCKeyword_1_0_1; }
	}
	public class ColumnReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.ColumnReference");
		private final Assignment cColumnAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cColumnColumnCrossReference_0 = (CrossReference)cColumnAssignment.eContents().get(0);
		private final RuleCall cColumnColumnIDTerminalRuleCall_0_1 = (RuleCall)cColumnColumnCrossReference_0.eContents().get(1);
		
		//ColumnReference:
		//	column=[schema::Column];
		@Override public ParserRule getRule() { return rule; }
		
		//column=[schema::Column]
		public Assignment getColumnAssignment() { return cColumnAssignment; }
		
		//[schema::Column]
		public CrossReference getColumnColumnCrossReference_0() { return cColumnColumnCrossReference_0; }
		
		//ID
		public RuleCall getColumnColumnIDTerminalRuleCall_0_1() { return cColumnColumnIDTerminalRuleCall_0_1; }
	}
	
	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator returns ArithmeticOperator:
		//	ADD="+" | SUBTRACT="-";
		public EnumRule getRule() { return rule; }
		
		//ADD="+" | SUBTRACT="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBTRACT="-"
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLYAsteriskKeyword_0_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiplicativeOperator returns ArithmeticOperator:
		//	MULTIPLY="*" | DIVIDE="/";
		public EnumRule getRule() { return rule; }
		
		//MULTIPLY="*" | DIVIDE="/"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIPLY="*"
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_0() { return cMULTIPLYEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMULTIPLYAsteriskKeyword_0_0() { return cMULTIPLYAsteriskKeyword_0_0; }
		
		//DIVIDE="/"
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }
	}
	public class ComparativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.MSQLQuery.ComparativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESS_THANLessThanSignKeyword_0_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THAN_OR_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_THAN_OR_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_THAN_OR_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALEqualsSignKeyword_2_0 = (Keyword)cEQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_4_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATER_THAN_OR_EQUALGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparativeOperator:
		//	LESS_THAN="<" | LESS_THAN_OR_EQUAL="<=" | EQUAL="=" |
		//	NOT_EQUAL="!=" | GREATER_THAN=">" | GREATER_THAN_OR_EQUAL=">=";
		public EnumRule getRule() { return rule; }
		
		//LESS_THAN="<" | LESS_THAN_OR_EQUAL="<=" | EQUAL="=" | NOT_EQUAL="!=" | GREATER_THAN=">" | GREATER_THAN_OR_EQUAL=">="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS_THAN="<"
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_0() { return cLESS_THANEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLESS_THANLessThanSignKeyword_0_0() { return cLESS_THANLessThanSignKeyword_0_0; }
		
		//LESS_THAN_OR_EQUAL="<="
		public EnumLiteralDeclaration getLESS_THAN_OR_EQUALEnumLiteralDeclaration_1() { return cLESS_THAN_OR_EQUALEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getLESS_THAN_OR_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_THAN_OR_EQUALLessThanSignEqualsSignKeyword_1_0; }
		
		//EQUAL="="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_2() { return cEQUALEnumLiteralDeclaration_2; }
		
		//"="
		public Keyword getEQUALEqualsSignKeyword_2_0() { return cEQUALEqualsSignKeyword_2_0; }
		
		//NOT_EQUAL="!="
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_3() { return cNOT_EQUALEnumLiteralDeclaration_3; }
		
		//"!="
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_3_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_3_0; }
		
		//GREATER_THAN=">"
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_4() { return cGREATER_THANEnumLiteralDeclaration_4; }
		
		//">"
		public Keyword getGREATER_THANGreaterThanSignKeyword_4_0() { return cGREATER_THANGreaterThanSignKeyword_4_0; }
		
		//GREATER_THAN_OR_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5() { return cGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5; }
		
		//">="
		public Keyword getGREATER_THAN_OR_EQUALGreaterThanSignEqualsSignKeyword_5_0() { return cGREATER_THAN_OR_EQUALGreaterThanSignEqualsSignKeyword_5_0; }
	}
	
	private final SelectQueryElements pSelectQuery;
	private final WhatClauseElements pWhatClause;
	private final WhatDirectiveElements pWhatDirective;
	private final AllColumnsWhatDirectiveElements pAllColumnsWhatDirective;
	private final SingleColumnWhatDirectiveElements pSingleColumnWhatDirective;
	private final FromClauseElements pFromClause;
	private final WhereClauseElements pWhereClause;
	private final ExpressionElements pExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements eAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements eMultiplicativeOperator;
	private final ComparativeExpressionElements pComparativeExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final ComparativeOperatorElements eComparativeOperator;
	private final IntegerLiteralElements pIntegerLiteral;
	private final OrderByClauseElements pOrderByClause;
	private final OrderByDirectiveElements pOrderByDirective;
	private final ColumnReferenceElements pColumnReference;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MSQLQueryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSelectQuery = new SelectQueryElements();
		this.pWhatClause = new WhatClauseElements();
		this.pWhatDirective = new WhatDirectiveElements();
		this.pAllColumnsWhatDirective = new AllColumnsWhatDirectiveElements();
		this.pSingleColumnWhatDirective = new SingleColumnWhatDirectiveElements();
		this.pFromClause = new FromClauseElements();
		this.pWhereClause = new WhereClauseElements();
		this.pExpression = new ExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.eAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.eMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pComparativeExpression = new ComparativeExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.eComparativeOperator = new ComparativeOperatorElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pOrderByClause = new OrderByClauseElements();
		this.pOrderByDirective = new OrderByDirectiveElements();
		this.pColumnReference = new ColumnReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mdse.minisql.query.MSQLQuery".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SelectQuery:
	//	"SELECT"
	//	whatClause+=WhatClause
	//	fromClause=FromClause
	//	whereClause=WhereClause?
	//	orderByClause=OrderByClause?
	//	";";
	public SelectQueryElements getSelectQueryAccess() {
		return pSelectQuery;
	}
	
	public ParserRule getSelectQueryRule() {
		return getSelectQueryAccess().getRule();
	}
	
	//WhatClause:
	//	whatDirective+=WhatDirective ("," whatDirective+=WhatDirective)*;
	public WhatClauseElements getWhatClauseAccess() {
		return pWhatClause;
	}
	
	public ParserRule getWhatClauseRule() {
		return getWhatClauseAccess().getRule();
	}
	
	//WhatDirective:
	//	AllColumnsWhatDirective | SingleColumnWhatDirective;
	public WhatDirectiveElements getWhatDirectiveAccess() {
		return pWhatDirective;
	}
	
	public ParserRule getWhatDirectiveRule() {
		return getWhatDirectiveAccess().getRule();
	}
	
	//// Possibly missing reference in metamodel from AllColumnsWhatDirective->ColumnReference
	//AllColumnsWhatDirective:
	//	"*" {AllColumnsWhatDirective};
	public AllColumnsWhatDirectiveElements getAllColumnsWhatDirectiveAccess() {
		return pAllColumnsWhatDirective;
	}
	
	public ParserRule getAllColumnsWhatDirectiveRule() {
		return getAllColumnsWhatDirectiveAccess().getRule();
	}
	
	//SingleColumnWhatDirective:
	//	columnReference=ColumnReference;
	public SingleColumnWhatDirectiveElements getSingleColumnWhatDirectiveAccess() {
		return pSingleColumnWhatDirective;
	}
	
	public ParserRule getSingleColumnWhatDirectiveRule() {
		return getSingleColumnWhatDirectiveAccess().getRule();
	}
	
	//FromClause:
	//	"FROM"
	//	table=[schema::Table];
	public FromClauseElements getFromClauseAccess() {
		return pFromClause;
	}
	
	public ParserRule getFromClauseRule() {
		return getFromClauseAccess().getRule();
	}
	
	//WhereClause:
	//	"WHERE" expression+=Expression;
	public WhereClauseElements getWhereClauseAccess() {
		return pWhereClause;
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}
	
	//Expression:
	//	ComparativeExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Left factoring and grammar actions resolves left-recursion (see slide 147 in 03-exercises)
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({ArithmeticExpression.expression1=current} operator=AdditiveOperator
	//	expression2=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//enum AdditiveOperator returns ArithmeticOperator:
	//	ADD="+" | SUBTRACT="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return eAdditiveOperator;
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	AtomicExpression ({ArithmeticExpression.expression1=current} operator=MultiplicativeOperator
	//	expression2=AtomicExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//enum MultiplicativeOperator returns ArithmeticOperator:
	//	MULTIPLY="*" | DIVIDE="/";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return eMultiplicativeOperator;
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//ComparativeExpression Expression:
	//	AdditiveExpression ({ComparativeExpression.expression1=current} operator=ComparativeOperator
	//	expression2=AdditiveExpression)*;
	public ComparativeExpressionElements getComparativeExpressionAccess() {
		return pComparativeExpression;
	}
	
	public ParserRule getComparativeExpressionRule() {
		return getComparativeExpressionAccess().getRule();
	}
	
	//AtomicExpression Expression:
	//	"(" Expression ")" | IntegerLiteral | ColumnReference;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//enum ComparativeOperator:
	//	LESS_THAN="<" | LESS_THAN_OR_EQUAL="<=" | EQUAL="=" |
	//	NOT_EQUAL="!=" | GREATER_THAN=">" | GREATER_THAN_OR_EQUAL=">=";
	public ComparativeOperatorElements getComparativeOperatorAccess() {
		return eComparativeOperator;
	}
	
	public EnumRule getComparativeOperatorRule() {
		return getComparativeOperatorAccess().getRule();
	}
	
	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//OrderByClause:
	//	"ORDER" "BY"
	//	orderDirectives+=OrderByDirective ("," orderDirectives+=OrderByDirective)*;
	public OrderByClauseElements getOrderByClauseAccess() {
		return pOrderByClause;
	}
	
	public ParserRule getOrderByClauseRule() {
		return getOrderByClauseAccess().getRule();
	}
	
	//OrderByDirective:
	//	columnReference+=ColumnReference ascending?=("ASC" | "DESC")? // Boolean syntax
	//;
	public OrderByDirectiveElements getOrderByDirectiveAccess() {
		return pOrderByDirective;
	}
	
	public ParserRule getOrderByDirectiveRule() {
		return getOrderByDirectiveAccess().getRule();
	}
	
	//ColumnReference:
	//	column=[schema::Column];
	public ColumnReferenceElements getColumnReferenceAccess() {
		return pColumnReference;
	}
	
	public ParserRule getColumnReferenceRule() {
		return getColumnReferenceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

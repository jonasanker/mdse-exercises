// automatically generated by Xtext
grammar org.mdse.minisql.query.MSQLQuery with org.eclipse.xtext.common.Terminals

import "http://mdse.org/minisql/query" 
import "http://mdse.org/minisql/schema" as schema
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SelectQuery:
	"SELECT"
		whatClause+=WhatClause
		fromClause=FromClause
		whereClause=WhereClause?
		orderByClause=OrderByClause?
		";"
;

WhatClause:
	whatDirective+=WhatDirective ("," whatDirective+=WhatDirective)*
;

WhatDirective:
	AllColumnsWhatDirective | SingleColumnWhatDirective	
;

// Possibly missing reference in metamodel from AllColumnsWhatDirective->ColumnReference
AllColumnsWhatDirective: 
	"*" {AllColumnsWhatDirective}	// Instantiate model element
;

SingleColumnWhatDirective:
	columnReference=ColumnReference
;

FromClause:
	"FROM"
		table=[schema::Table]
;

WhereClause:
	"WHERE" expression+=Expression
;

Expression:
	ComparativeExpression
;

// Left factoring and grammar actions resolves left-recursion (see slide 147 in 03-exercises)
AdditiveExpression returns Expression:
	MultiplicativeExpression({ArithmeticExpression.expression1=current} 
		operator=AdditiveOperator
		expression2=MultiplicativeExpression
	)*
;

enum AdditiveOperator returns ArithmeticOperator:
	ADD="+" | SUBTRACT="-"
;

MultiplicativeExpression returns Expression:
	AtomicExpression({ArithmeticExpression.expression1=current} 
		operator=MultiplicativeOperator 
		expression2=AtomicExpression
	)*
;

enum MultiplicativeOperator returns ArithmeticOperator:
	MULTIPLY="*" | DIVIDE="/"
;

ComparativeExpression returns Expression:
	AdditiveExpression ({ComparativeExpression.expression1=current} 
		operator=ComparativeOperator 
		expression2=AdditiveExpression
	)*
;

AtomicExpression returns Expression:
	("("Expression")") | IntegerLiteral | ColumnReference
;

enum ComparativeOperator:
	LESS_THAN="<" | LESS_THAN_OR_EQUAL="<=" | EQUAL="=" | 
	NOT_EQUAL="!=" | GREATER_THAN=">" | GREATER_THAN_OR_EQUAL=">="

;

IntegerLiteral:
	value=INT
;

OrderByClause:
	"ORDER" "BY"	
		orderDirectives+=OrderByDirective ("," orderDirectives+=OrderByDirective)*
;

OrderByDirective:
	columnReference+=ColumnReference (ascending?=("ASC" | "DESC"))?		// Boolean syntax
;

ColumnReference:
	column=[schema::Column]
;
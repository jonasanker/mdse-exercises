/*
 * generated by Xtext 2.20.0
 */
grammar InternalQuery;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.mdse.minisql.query.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.mdse.minisql.query.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mdse.minisql.query.services.QueryGrammarAccess;

}
@parser::members {
	private QueryGrammarAccess grammarAccess;

	public void setGrammarAccess(QueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSelectQuery
entryRuleSelectQuery
:
{ before(grammarAccess.getSelectQueryRule()); }
	 ruleSelectQuery
{ after(grammarAccess.getSelectQueryRule()); } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectQueryAccess().getGroup()); }
		(rule__SelectQuery__Group__0)
		{ after(grammarAccess.getSelectQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhatClause
entryRuleWhatClause
:
{ before(grammarAccess.getWhatClauseRule()); }
	 ruleWhatClause
{ after(grammarAccess.getWhatClauseRule()); } 
	 EOF 
;

// Rule WhatClause
ruleWhatClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhatClauseAccess().getGroup()); }
		(rule__WhatClause__Group__0)
		{ after(grammarAccess.getWhatClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhatDirective
entryRuleWhatDirective
:
{ before(grammarAccess.getWhatDirectiveRule()); }
	 ruleWhatDirective
{ after(grammarAccess.getWhatDirectiveRule()); } 
	 EOF 
;

// Rule WhatDirective
ruleWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getAlternatives()); }
		(rule__WhatDirective__Alternatives)
		{ after(grammarAccess.getWhatDirectiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAllColumnsWhatDirective
entryRuleAllColumnsWhatDirective
:
{ before(grammarAccess.getAllColumnsWhatDirectiveRule()); }
	 ruleAllColumnsWhatDirective
{ after(grammarAccess.getAllColumnsWhatDirectiveRule()); } 
	 EOF 
;

// Rule AllColumnsWhatDirective
ruleAllColumnsWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getGroup()); }
		(rule__AllColumnsWhatDirective__Group__0)
		{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleColumnWhatDirective
entryRuleSingleColumnWhatDirective
:
{ before(grammarAccess.getSingleColumnWhatDirectiveRule()); }
	 ruleSingleColumnWhatDirective
{ after(grammarAccess.getSingleColumnWhatDirectiveRule()); } 
	 EOF 
;

// Rule SingleColumnWhatDirective
ruleSingleColumnWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceAssignment()); }
		(rule__SingleColumnWhatDirective__ColumnReferenceAssignment)
		{ after(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFromClause
entryRuleFromClause
:
{ before(grammarAccess.getFromClauseRule()); }
	 ruleFromClause
{ after(grammarAccess.getFromClauseRule()); } 
	 EOF 
;

// Rule FromClause
ruleFromClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromClauseAccess().getGroup()); }
		(rule__FromClause__Group__0)
		{ after(grammarAccess.getFromClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrderByClause
entryRuleOrderByClause
:
{ before(grammarAccess.getOrderByClauseRule()); }
	 ruleOrderByClause
{ after(grammarAccess.getOrderByClauseRule()); } 
	 EOF 
;

// Rule OrderByClause
ruleOrderByClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getGroup()); }
		(rule__OrderByClause__Group__0)
		{ after(grammarAccess.getOrderByClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrderByDirective
entryRuleOrderByDirective
:
{ before(grammarAccess.getOrderByDirectiveRule()); }
	 ruleOrderByDirective
{ after(grammarAccess.getOrderByDirectiveRule()); } 
	 EOF 
;

// Rule OrderByDirective
ruleOrderByDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getGroup()); }
		(rule__OrderByDirective__Group__0)
		{ after(grammarAccess.getOrderByDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnReference
entryRuleColumnReference
:
{ before(grammarAccess.getColumnReferenceRule()); }
	 ruleColumnReference
{ after(grammarAccess.getColumnReferenceRule()); } 
	 EOF 
;

// Rule ColumnReference
ruleColumnReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnReferenceAccess().getColumnAssignment()); }
		(rule__ColumnReference__ColumnAssignment)
		{ after(grammarAccess.getColumnReferenceAccess().getColumnAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatDirective__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getAllColumnsWhatDirectiveParserRuleCall_0()); }
		ruleAllColumnsWhatDirective
		{ after(grammarAccess.getWhatDirectiveAccess().getAllColumnsWhatDirectiveParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getSingleColumnWhatDirectiveParserRuleCall_1()); }
		ruleSingleColumnWhatDirective
		{ after(grammarAccess.getWhatDirectiveAccess().getSingleColumnWhatDirectiveParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__AscendingAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingASCKeyword_1_0_0()); }
		'ASC'
		{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingASCKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingDESCKeyword_1_0_1()); }
		'DESC'
		{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingDESCKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__0__Impl
	rule__SelectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
	'SELECT'
	{ after(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__1__Impl
	rule__SelectQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getWhatClauseAssignment_1()); }
	(rule__SelectQuery__WhatClauseAssignment_1)
	{ after(grammarAccess.getSelectQueryAccess().getWhatClauseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__2__Impl
	rule__SelectQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getFromClauseAssignment_2()); }
	(rule__SelectQuery__FromClauseAssignment_2)
	{ after(grammarAccess.getSelectQueryAccess().getFromClauseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__3__Impl
	rule__SelectQuery__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getOrderByClauseAssignment_3()); }
	(rule__SelectQuery__OrderByClauseAssignment_3)
	{ after(grammarAccess.getSelectQueryAccess().getOrderByClauseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhatClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group__0__Impl
	rule__WhatClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_0()); }
	(rule__WhatClause__WhatDirectivesAssignment_0)
	{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getGroup_1()); }
	(rule__WhatClause__Group_1__0)*
	{ after(grammarAccess.getWhatClauseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhatClause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group_1__0__Impl
	rule__WhatClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getWhatClauseAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_1_1()); }
	(rule__WhatClause__WhatDirectivesAssignment_1_1)
	{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AllColumnsWhatDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllColumnsWhatDirective__Group__0__Impl
	rule__AllColumnsWhatDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getAsteriskKeyword_0()); }
	'*'
	{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllColumnsWhatDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getAllColumnsWhatDirectiveAction_1()); }
	()
	{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getAllColumnsWhatDirectiveAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromClause__Group__0__Impl
	rule__FromClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
	'FROM'
	{ after(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromClauseAccess().getTableAssignment_1()); }
	(rule__FromClause__TableAssignment_1)
	{ after(grammarAccess.getFromClauseAccess().getTableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__0__Impl
	rule__OrderByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }
	'ORDER'
	{ after(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__1__Impl
	rule__OrderByClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }
	'BY'
	{ after(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__2__Impl
	rule__OrderByClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesAssignment_2()); }
	(rule__OrderByClause__OrderByDirectivesAssignment_2)
	{ after(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
	(rule__OrderByClause__Group_3__0)*
	{ after(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group_3__0__Impl
	rule__OrderByClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesAssignment_3_1()); }
	(rule__OrderByClause__OrderByDirectivesAssignment_3_1)
	{ after(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByDirective__Group__0__Impl
	rule__OrderByDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceAssignment_0()); }
	(rule__OrderByDirective__ColumnReferenceAssignment_0)
	{ after(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingAssignment_1()); }
	(rule__OrderByDirective__AscendingAssignment_1)?
	{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectQuery__WhatClauseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getWhatClauseWhatClauseParserRuleCall_1_0()); }
		ruleWhatClause
		{ after(grammarAccess.getSelectQueryAccess().getWhatClauseWhatClauseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__FromClauseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getFromClauseFromClauseParserRuleCall_2_0()); }
		ruleFromClause
		{ after(grammarAccess.getSelectQueryAccess().getFromClauseFromClauseParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__OrderByClauseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getOrderByClauseOrderByClauseParserRuleCall_3_0()); }
		ruleOrderByClause
		{ after(grammarAccess.getSelectQueryAccess().getOrderByClauseOrderByClauseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__WhatDirectivesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesSingleColumnWhatDirectiveParserRuleCall_0_0()); }
		ruleSingleColumnWhatDirective
		{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesSingleColumnWhatDirectiveParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__WhatDirectivesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesWhatDirectiveParserRuleCall_1_1_0()); }
		ruleWhatDirective
		{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesWhatDirectiveParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleColumnWhatDirective__ColumnReferenceAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0()); }
		ruleColumnReference
		{ after(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__TableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromClauseAccess().getTableTableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFromClauseAccess().getTableTableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFromClauseAccess().getTableTableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFromClauseAccess().getTableTableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderByDirectivesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesOrderByDirectiveParserRuleCall_2_0()); }
		ruleOrderByDirective
		{ after(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesOrderByDirectiveParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderByDirectivesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesOrderByDirectiveParserRuleCall_3_1_0()); }
		ruleOrderByDirective
		{ after(grammarAccess.getOrderByClauseAccess().getOrderByDirectivesOrderByDirectiveParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__ColumnReferenceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0_0()); }
		ruleColumnReference
		{ after(grammarAccess.getOrderByDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByDirective__AscendingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByDirectiveAccess().getAscendingAlternatives_1_0()); }
		(rule__OrderByDirective__AscendingAlternatives_1_0)
		{ after(grammarAccess.getOrderByDirectiveAccess().getAscendingAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnReference__ColumnAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0()); }
		(
			{ before(grammarAccess.getColumnReferenceAccess().getColumnColumnIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getColumnReferenceAccess().getColumnColumnIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

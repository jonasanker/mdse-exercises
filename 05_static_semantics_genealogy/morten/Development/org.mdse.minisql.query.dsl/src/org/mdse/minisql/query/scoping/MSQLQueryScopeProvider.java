/*
 * generated by Xtext 2.20.0
 */
package org.mdse.minisql.query.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.mdse.minisql.query.ColumnReference;
import org.mdse.minisql.query.FromClause;
import org.mdse.minisql.query.SelectQuery;
import org.mdse.minisql.query.TableReference;
import org.mdse.minisql.schema.Column;
import org.mdse.minisql.schema.Table;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MSQLQueryScopeProvider extends AbstractMSQLQueryScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof ColumnReference) {
			ColumnReference columnReference = (ColumnReference) context;
			return getColumnReferenceScope(columnReference);
		}
		
		return super.getScope(context, reference);
	}

	protected IScope getColumnReferenceScope(ColumnReference columnReference) {
		EObject root = EcoreUtil.getRootContainer(columnReference);
		
		if (!(root instanceof SelectQuery)) {
			System.err.println("Root element is not a " + SelectQuery.class.getSimpleName());
			return null;
		}
		
		SelectQuery selectQuery = (SelectQuery) root;
		FromClause fromClause = selectQuery.getFromClause();
		
		if (fromClause == null) {
			System.err.println("From clause is null.");
			return null;
		}
			
		TableReference tableReference = fromClause.getTableReference();
		
		if (tableReference == null) {
			System.err.println("Table reference is null.");
			return null;
		}
		
		Table table = tableReference.getTable();
		
		if (table == null) {
			System.err.println("Table is null.");
			return null;
		}
		
		List<Column> columns = table.getColumns();
		return Scopes.scopeFor(columns);
	}
}
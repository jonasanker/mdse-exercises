/**
 */
package org.mdse.minisql.query.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.mdse.minisql.query.util.QueryAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QueryItemProviderAdapterFactory extends QueryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QueryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.SelectQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectQueryItemProvider selectQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.SelectQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectQueryAdapter() {
		if (selectQueryItemProvider == null) {
			selectQueryItemProvider = new SelectQueryItemProvider(this);
		}

		return selectQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.FromClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromClauseItemProvider fromClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.FromClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromClauseAdapter() {
		if (fromClauseItemProvider == null) {
			fromClauseItemProvider = new FromClauseItemProvider(this);
		}

		return fromClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.WhatClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhatClauseItemProvider whatClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.WhatClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhatClauseAdapter() {
		if (whatClauseItemProvider == null) {
			whatClauseItemProvider = new WhatClauseItemProvider(this);
		}

		return whatClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.AllColumnsWhatDirective} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllColumnsWhatDirectiveItemProvider allColumnsWhatDirectiveItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.AllColumnsWhatDirective}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllColumnsWhatDirectiveAdapter() {
		if (allColumnsWhatDirectiveItemProvider == null) {
			allColumnsWhatDirectiveItemProvider = new AllColumnsWhatDirectiveItemProvider(this);
		}

		return allColumnsWhatDirectiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.SingleColumnWhatDirective} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleColumnWhatDirectiveItemProvider singleColumnWhatDirectiveItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.SingleColumnWhatDirective}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleColumnWhatDirectiveAdapter() {
		if (singleColumnWhatDirectiveItemProvider == null) {
			singleColumnWhatDirectiveItemProvider = new SingleColumnWhatDirectiveItemProvider(this);
		}

		return singleColumnWhatDirectiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.WhereClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhereClauseItemProvider whereClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.WhereClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhereClauseAdapter() {
		if (whereClauseItemProvider == null) {
			whereClauseItemProvider = new WhereClauseItemProvider(this);
		}

		return whereClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.OrderByClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderByClauseItemProvider orderByClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.OrderByClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderByClauseAdapter() {
		if (orderByClauseItemProvider == null) {
			orderByClauseItemProvider = new OrderByClauseItemProvider(this);
		}

		return orderByClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.OrderDirective} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderDirectiveItemProvider orderDirectiveItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.OrderDirective}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderDirectiveAdapter() {
		if (orderDirectiveItemProvider == null) {
			orderDirectiveItemProvider = new OrderDirectiveItemProvider(this);
		}

		return orderDirectiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.BinaryLogicalExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryLogicalExpressionItemProvider binaryLogicalExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.BinaryLogicalExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryLogicalExpressionAdapter() {
		if (binaryLogicalExpressionItemProvider == null) {
			binaryLogicalExpressionItemProvider = new BinaryLogicalExpressionItemProvider(this);
		}

		return binaryLogicalExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.UnaryLogicalExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryLogicalExpressionItemProvider unaryLogicalExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.UnaryLogicalExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryLogicalExpressionAdapter() {
		if (unaryLogicalExpressionItemProvider == null) {
			unaryLogicalExpressionItemProvider = new UnaryLogicalExpressionItemProvider(this);
		}

		return unaryLogicalExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.ComparativeExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparativeExpressionItemProvider comparativeExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.ComparativeExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparativeExpressionAdapter() {
		if (comparativeExpressionItemProvider == null) {
			comparativeExpressionItemProvider = new ComparativeExpressionItemProvider(this);
		}

		return comparativeExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.ArithmeticExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmeticExpressionItemProvider arithmeticExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.ArithmeticExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmeticExpressionAdapter() {
		if (arithmeticExpressionItemProvider == null) {
			arithmeticExpressionItemProvider = new ArithmeticExpressionItemProvider(this);
		}

		return arithmeticExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.TableReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableReferenceItemProvider tableReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.TableReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableReferenceAdapter() {
		if (tableReferenceItemProvider == null) {
			tableReferenceItemProvider = new TableReferenceItemProvider(this);
		}

		return tableReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.ColumnReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnReferenceItemProvider columnReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.ColumnReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnReferenceAdapter() {
		if (columnReferenceItemProvider == null) {
			columnReferenceItemProvider = new ColumnReferenceItemProvider(this);
		}

		return columnReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.StringLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringLiteralItemProvider stringLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.StringLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringLiteralAdapter() {
		if (stringLiteralItemProvider == null) {
			stringLiteralItemProvider = new StringLiteralItemProvider(this);
		}

		return stringLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.IntegerLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerLiteralItemProvider integerLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.IntegerLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerLiteralAdapter() {
		if (integerLiteralItemProvider == null) {
			integerLiteralItemProvider = new IntegerLiteralItemProvider(this);
		}

		return integerLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mdse.minisql.query.BooleanLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanLiteralItemProvider booleanLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.mdse.minisql.query.BooleanLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanLiteralAdapter() {
		if (booleanLiteralItemProvider == null) {
			booleanLiteralItemProvider = new BooleanLiteralItemProvider(this);
		}

		return booleanLiteralItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (selectQueryItemProvider != null) selectQueryItemProvider.dispose();
		if (fromClauseItemProvider != null) fromClauseItemProvider.dispose();
		if (whatClauseItemProvider != null) whatClauseItemProvider.dispose();
		if (allColumnsWhatDirectiveItemProvider != null) allColumnsWhatDirectiveItemProvider.dispose();
		if (singleColumnWhatDirectiveItemProvider != null) singleColumnWhatDirectiveItemProvider.dispose();
		if (whereClauseItemProvider != null) whereClauseItemProvider.dispose();
		if (orderByClauseItemProvider != null) orderByClauseItemProvider.dispose();
		if (orderDirectiveItemProvider != null) orderDirectiveItemProvider.dispose();
		if (binaryLogicalExpressionItemProvider != null) binaryLogicalExpressionItemProvider.dispose();
		if (unaryLogicalExpressionItemProvider != null) unaryLogicalExpressionItemProvider.dispose();
		if (comparativeExpressionItemProvider != null) comparativeExpressionItemProvider.dispose();
		if (arithmeticExpressionItemProvider != null) arithmeticExpressionItemProvider.dispose();
		if (tableReferenceItemProvider != null) tableReferenceItemProvider.dispose();
		if (columnReferenceItemProvider != null) columnReferenceItemProvider.dispose();
		if (stringLiteralItemProvider != null) stringLiteralItemProvider.dispose();
		if (integerLiteralItemProvider != null) integerLiteralItemProvider.dispose();
		if (booleanLiteralItemProvider != null) booleanLiteralItemProvider.dispose();
	}

}

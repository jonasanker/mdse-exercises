/*
 * generated by Xtext 2.20.0
 */
parser grammar InternalMSQLQueryParser;

options {
	tokenVocab=InternalMSQLQueryLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.mdse.minisql.query.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mdse.minisql.query.services.MSQLQueryGrammarAccess;

}
@members {
	private MSQLQueryGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("BY", "'BY'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("ASC", "'ASC'");
		tokenNameToValue.put("NOT", "'NOT'");
		tokenNameToValue.put("DESC", "'DESC'");
		tokenNameToValue.put("FROM", "'FROM'");
		tokenNameToValue.put("TRUE", "'TRUE'");
		tokenNameToValue.put("FALSE", "'FALSE'");
		tokenNameToValue.put("ORDER", "'ORDER'");
		tokenNameToValue.put("WHERE", "'WHERE'");
		tokenNameToValue.put("SELECT", "'SELECT'");
	}

	public void setGrammarAccess(MSQLQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleSelectQuery
entryRuleSelectQuery
:
{ before(grammarAccess.getSelectQueryRule()); }
	 ruleSelectQuery
{ after(grammarAccess.getSelectQueryRule()); } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectQueryAccess().getGroup()); }
		(rule__SelectQuery__Group__0)
		{ after(grammarAccess.getSelectQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhatClause
entryRuleWhatClause
:
{ before(grammarAccess.getWhatClauseRule()); }
	 ruleWhatClause
{ after(grammarAccess.getWhatClauseRule()); } 
	 EOF 
;

// Rule WhatClause
ruleWhatClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhatClauseAccess().getGroup()); }
		(rule__WhatClause__Group__0)
		{ after(grammarAccess.getWhatClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhatDirective
entryRuleWhatDirective
:
{ before(grammarAccess.getWhatDirectiveRule()); }
	 ruleWhatDirective
{ after(grammarAccess.getWhatDirectiveRule()); } 
	 EOF 
;

// Rule WhatDirective
ruleWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getAlternatives()); }
		(rule__WhatDirective__Alternatives)
		{ after(grammarAccess.getWhatDirectiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAllColumnsWhatDirective
entryRuleAllColumnsWhatDirective
:
{ before(grammarAccess.getAllColumnsWhatDirectiveRule()); }
	 ruleAllColumnsWhatDirective
{ after(grammarAccess.getAllColumnsWhatDirectiveRule()); } 
	 EOF 
;

// Rule AllColumnsWhatDirective
ruleAllColumnsWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getGroup()); }
		(rule__AllColumnsWhatDirective__Group__0)
		{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleColumnWhatDirective
entryRuleSingleColumnWhatDirective
:
{ before(grammarAccess.getSingleColumnWhatDirectiveRule()); }
	 ruleSingleColumnWhatDirective
{ after(grammarAccess.getSingleColumnWhatDirectiveRule()); } 
	 EOF 
;

// Rule SingleColumnWhatDirective
ruleSingleColumnWhatDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceAssignment()); }
		(rule__SingleColumnWhatDirective__ColumnReferenceAssignment)
		{ after(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFromClause
entryRuleFromClause
:
{ before(grammarAccess.getFromClauseRule()); }
	 ruleFromClause
{ after(grammarAccess.getFromClauseRule()); } 
	 EOF 
;

// Rule FromClause
ruleFromClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromClauseAccess().getGroup()); }
		(rule__FromClause__Group__0)
		{ after(grammarAccess.getFromClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhereClause
entryRuleWhereClause
:
{ before(grammarAccess.getWhereClauseRule()); }
	 ruleWhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
		(rule__WhereClause__Group__0)
		{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrderByClause
entryRuleOrderByClause
:
{ before(grammarAccess.getOrderByClauseRule()); }
	 ruleOrderByClause
{ after(grammarAccess.getOrderByClauseRule()); } 
	 EOF 
;

// Rule OrderByClause
ruleOrderByClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getGroup()); }
		(rule__OrderByClause__Group__0)
		{ after(grammarAccess.getOrderByClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrderDirective
entryRuleOrderDirective
:
{ before(grammarAccess.getOrderDirectiveRule()); }
	 ruleOrderDirective
{ after(grammarAccess.getOrderDirectiveRule()); } 
	 EOF 
;

// Rule OrderDirective
ruleOrderDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderDirectiveAccess().getGroup()); }
		(rule__OrderDirective__Group__0)
		{ after(grammarAccess.getOrderDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndOperand
entryRuleAndOperand
:
{ before(grammarAccess.getAndOperandRule()); }
	 ruleAndOperand
{ after(grammarAccess.getAndOperandRule()); } 
	 EOF 
;

// Rule AndOperand
ruleAndOperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndOperandAccess().getAlternatives()); }
		(rule__AndOperand__Alternatives)
		{ after(grammarAccess.getAndOperandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotExpression
entryRuleNotExpression
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
		(rule__NotExpression__Group__0)
		{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparativeExpression
entryRuleComparativeExpression
:
{ before(grammarAccess.getComparativeExpressionRule()); }
	 ruleComparativeExpression
{ after(grammarAccess.getComparativeExpressionRule()); } 
	 EOF 
;

// Rule ComparativeExpression
ruleComparativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparativeExpressionAccess().getGroup()); }
		(rule__ComparativeExpression__Group__0)
		{ after(grammarAccess.getComparativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
		(rule__AtomicExpression__Alternatives)
		{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTableReference
entryRuleTableReference
:
{ before(grammarAccess.getTableReferenceRule()); }
	 ruleTableReference
{ after(grammarAccess.getTableReferenceRule()); } 
	 EOF 
;

// Rule TableReference
ruleTableReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableReferenceAccess().getTableAssignment()); }
		(rule__TableReference__TableAssignment)
		{ after(grammarAccess.getTableReferenceAccess().getTableAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnReference
entryRuleColumnReference
:
{ before(grammarAccess.getColumnReferenceRule()); }
	 ruleColumnReference
{ after(grammarAccess.getColumnReferenceRule()); } 
	 EOF 
;

// Rule ColumnReference
ruleColumnReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnReferenceAccess().getColumnAssignment()); }
		(rule__ColumnReference__ColumnAssignment)
		{ after(grammarAccess.getColumnReferenceAccess().getColumnAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
		(rule__IntegerLiteral__ValueAssignment)
		{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
		(rule__BooleanLiteral__ValueAssignment)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OrOperator
ruleOrOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
		(OR)
		{ after(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AndOperator
ruleAndOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
		(AND)
		{ after(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule NotOperator
ruleNotOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
		(NOT)
		{ after(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ComparativeOperator
ruleComparativeOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getAlternatives()); }
		(rule__ComparativeOperator__Alternatives)
		{ after(grammarAccess.getComparativeOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AdditiveOperator
ruleAdditiveOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
		(rule__AdditiveOperator__Alternatives)
		{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MultiplicativeOperator
ruleMultiplicativeOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
		(rule__MultiplicativeOperator__Alternatives)
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatDirective__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getAllColumnsWhatDirectiveParserRuleCall_0()); }
		ruleAllColumnsWhatDirective
		{ after(grammarAccess.getWhatDirectiveAccess().getAllColumnsWhatDirectiveParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWhatDirectiveAccess().getSingleColumnWhatDirectiveParserRuleCall_1()); }
		ruleSingleColumnWhatDirective
		{ after(grammarAccess.getWhatDirectiveAccess().getSingleColumnWhatDirectiveParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderDirective__AscendingAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderDirectiveAccess().getAscendingASCKeyword_1_0_0()); }
		ASC
		{ after(grammarAccess.getOrderDirectiveAccess().getAscendingASCKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrderDirectiveAccess().getAscendingDESCKeyword_1_0_1()); }
		DESC
		{ after(grammarAccess.getOrderDirectiveAccess().getAscendingDESCKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndOperandAccess().getNotExpressionParserRuleCall_0()); }
		ruleNotExpression
		{ after(grammarAccess.getAndOperandAccess().getNotExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndOperandAccess().getComparativeExpressionParserRuleCall_1()); }
		ruleComparativeExpression
		{ after(grammarAccess.getAndOperandAccess().getComparativeExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_0()); }
		(rule__AtomicExpression__Group_0__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getColumnReferenceParserRuleCall_1()); }
		ruleColumnReference
		{ after(grammarAccess.getAtomicExpressionAccess().getColumnReferenceParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getLiteralParserRuleCall_2()); }
		ruleLiteral
		{ after(grammarAccess.getAtomicExpressionAccess().getLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
		ruleIntegerLiteral
		{ after(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_0_0()); }
		TRUE
		{ after(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_0_1()); }
		FALSE
		{ after(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_0()); }
		(LessThanSignEqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getLESS_THANEnumLiteralDeclaration_1()); }
		(LessThanSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getLESS_THANEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getEQUALEnumLiteralDeclaration_2()); }
		(EqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getEQUALEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_3()); }
		(ExclamationMarkEqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4()); }
		(GreaterThanSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparativeOperatorAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5()); }
		(GreaterThanSignEqualsSign)
		{ after(grammarAccess.getComparativeOperatorAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getADDEnumLiteralDeclaration_0()); }
		(PlusSign)
		{ after(grammarAccess.getAdditiveOperatorAccess().getADDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1()); }
		(HyphenMinus)
		{ after(grammarAccess.getAdditiveOperatorAccess().getSUBTRACTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getMULTIPLYEnumLiteralDeclaration_0()); }
		(Asterisk)
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getMULTIPLYEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); }
		(Solidus)
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__0__Impl
	rule__SelectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
	SELECT
	{ after(grammarAccess.getSelectQueryAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__1__Impl
	rule__SelectQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getWhatClauseAssignment_1()); }
	(rule__SelectQuery__WhatClauseAssignment_1)
	{ after(grammarAccess.getSelectQueryAccess().getWhatClauseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__2__Impl
	rule__SelectQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getFromClauseAssignment_2()); }
	(rule__SelectQuery__FromClauseAssignment_2)
	{ after(grammarAccess.getSelectQueryAccess().getFromClauseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__3__Impl
	rule__SelectQuery__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getWhereClauseAssignment_3()); }
	(rule__SelectQuery__WhereClauseAssignment_3)?
	{ after(grammarAccess.getSelectQueryAccess().getWhereClauseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__4__Impl
	rule__SelectQuery__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getOrderByClauseAssignment_4()); }
	(rule__SelectQuery__OrderByClauseAssignment_4)?
	{ after(grammarAccess.getSelectQueryAccess().getOrderByClauseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectQuery__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_5()); }
	Semicolon
	{ after(grammarAccess.getSelectQueryAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhatClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group__0__Impl
	rule__WhatClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_0()); }
	(rule__WhatClause__WhatDirectivesAssignment_0)
	{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getGroup_1()); }
	(rule__WhatClause__Group_1__0)*
	{ after(grammarAccess.getWhatClauseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhatClause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group_1__0__Impl
	rule__WhatClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getWhatClauseAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhatClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_1_1()); }
	(rule__WhatClause__WhatDirectivesAssignment_1_1)
	{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AllColumnsWhatDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllColumnsWhatDirective__Group__0__Impl
	rule__AllColumnsWhatDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getAsteriskKeyword_0()); }
	Asterisk
	{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AllColumnsWhatDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllColumnsWhatDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllColumnsWhatDirectiveAccess().getAllColumnsWhatDirectiveAction_1()); }
	()
	{ after(grammarAccess.getAllColumnsWhatDirectiveAccess().getAllColumnsWhatDirectiveAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromClause__Group__0__Impl
	rule__FromClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
	FROM
	{ after(grammarAccess.getFromClauseAccess().getFROMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromClauseAccess().getTableReferenceAssignment_1()); }
	(rule__FromClause__TableReferenceAssignment_1)
	{ after(grammarAccess.getFromClauseAccess().getTableReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__0__Impl
	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
	WHERE
	{ after(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
	(rule__WhereClause__ExpressionAssignment_1)
	{ after(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__0__Impl
	rule__OrderByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }
	ORDER
	{ after(grammarAccess.getOrderByClauseAccess().getORDERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__1__Impl
	rule__OrderByClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }
	BY
	{ after(grammarAccess.getOrderByClauseAccess().getBYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__2__Impl
	rule__OrderByClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_2()); }
	(rule__OrderByClause__OrderDirectivesAssignment_2)
	{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
	(rule__OrderByClause__Group_3__0)*
	{ after(grammarAccess.getOrderByClauseAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group_3__0__Impl
	rule__OrderByClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getOrderByClauseAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderByClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_3_1()); }
	(rule__OrderByClause__OrderDirectivesAssignment_3_1)
	{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderDirective__Group__0__Impl
	rule__OrderDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderDirectiveAccess().getColumnReferenceAssignment_0()); }
	(rule__OrderDirective__ColumnReferenceAssignment_0)
	{ after(grammarAccess.getOrderDirectiveAccess().getColumnReferenceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderDirectiveAccess().getAscendingAssignment_1()); }
	(rule__OrderDirective__AscendingAssignment_1)?
	{ after(grammarAccess.getOrderDirectiveAccess().getAscendingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getBinaryLogicalExpressionExpression1Action_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getBinaryLogicalExpressionExpression1Action_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__OrExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getExpression2Assignment_1_2()); }
	(rule__OrExpression__Expression2Assignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getExpression2Assignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndOperandParserRuleCall_0()); }
	ruleAndOperand
	{ after(grammarAccess.getAndExpressionAccess().getAndOperandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getBinaryLogicalExpressionExpression1Action_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getBinaryLogicalExpressionExpression1Action_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AndExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getExpression2Assignment_1_2()); }
	(rule__AndExpression__Expression2Assignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getExpression2Assignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0()); }
	(rule__NotExpression__OperatorAssignment_0)
	{ after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getExpressionAssignment_1()); }
	(rule__NotExpression__ExpressionAssignment_1)
	{ after(grammarAccess.getNotExpressionAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group__0__Impl
	rule__ComparativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
	{ after(grammarAccess.getComparativeExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getGroup_1()); }
	(rule__ComparativeExpression__Group_1__0)*
	{ after(grammarAccess.getComparativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group_1__0__Impl
	rule__ComparativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getComparativeExpressionExpression1Action_1_0()); }
	()
	{ after(grammarAccess.getComparativeExpressionAccess().getComparativeExpressionExpression1Action_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group_1__1__Impl
	rule__ComparativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ComparativeExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getComparativeExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparativeExpressionAccess().getExpression2Assignment_1_2()); }
	(rule__ComparativeExpression__Expression2Assignment_1_2)
	{ after(grammarAccess.getComparativeExpressionAccess().getExpression2Assignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
	(rule__AdditiveExpression__Group_1__0)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getArithmeticExpressionExpression1Action_1_0()); }
	()
	{ after(grammarAccess.getAdditiveExpressionAccess().getArithmeticExpressionExpression1Action_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AdditiveExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getExpression2Assignment_1_2()); }
	(rule__AdditiveExpression__Expression2Assignment_1_2)
	{ after(grammarAccess.getAdditiveExpressionAccess().getExpression2Assignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getAtomicExpressionParserRuleCall_0()); }
	ruleAtomicExpression
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getAtomicExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getArithmeticExpressionExpression1Action_1_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getArithmeticExpressionExpression1Action_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__MultiplicativeExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpression2Assignment_1_2()); }
	(rule__MultiplicativeExpression__Expression2Assignment_1_2)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpression2Assignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_0__0__Impl
	rule__AtomicExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_0__1__Impl
	rule__AtomicExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getAtomicExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectQuery__WhatClauseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getWhatClauseWhatClauseParserRuleCall_1_0()); }
		ruleWhatClause
		{ after(grammarAccess.getSelectQueryAccess().getWhatClauseWhatClauseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__FromClauseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getFromClauseFromClauseParserRuleCall_2_0()); }
		ruleFromClause
		{ after(grammarAccess.getSelectQueryAccess().getFromClauseFromClauseParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__WhereClauseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getWhereClauseWhereClauseParserRuleCall_3_0()); }
		ruleWhereClause
		{ after(grammarAccess.getSelectQueryAccess().getWhereClauseWhereClauseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__OrderByClauseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectQueryAccess().getOrderByClauseOrderByClauseParserRuleCall_4_0()); }
		ruleOrderByClause
		{ after(grammarAccess.getSelectQueryAccess().getOrderByClauseOrderByClauseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__WhatDirectivesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesWhatDirectiveParserRuleCall_0_0()); }
		ruleWhatDirective
		{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesWhatDirectiveParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhatClause__WhatDirectivesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhatClauseAccess().getWhatDirectivesWhatDirectiveParserRuleCall_1_1_0()); }
		ruleWhatDirective
		{ after(grammarAccess.getWhatClauseAccess().getWhatDirectivesWhatDirectiveParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleColumnWhatDirective__ColumnReferenceAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0()); }
		ruleColumnReference
		{ after(grammarAccess.getSingleColumnWhatDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__TableReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromClauseAccess().getTableReferenceTableReferenceParserRuleCall_1_0()); }
		ruleTableReference
		{ after(grammarAccess.getFromClauseAccess().getTableReferenceTableReferenceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderDirectivesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderDirectiveParserRuleCall_2_0()); }
		ruleOrderDirective
		{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderDirectiveParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OrderDirectivesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderDirectiveParserRuleCall_3_1_0()); }
		ruleOrderDirective
		{ after(grammarAccess.getOrderByClauseAccess().getOrderDirectivesOrderDirectiveParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderDirective__ColumnReferenceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0_0()); }
		ruleColumnReference
		{ after(grammarAccess.getOrderDirectiveAccess().getColumnReferenceColumnReferenceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderDirective__AscendingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderDirectiveAccess().getAscendingAlternatives_1_0()); }
		(rule__OrderDirective__AscendingAlternatives_1_0)
		{ after(grammarAccess.getOrderDirectiveAccess().getAscendingAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
		ruleOrOperator
		{ after(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Expression2Assignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getExpression2AndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getExpression2AndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
		ruleAndOperator
		{ after(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Expression2Assignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getExpression2AndOperandParserRuleCall_1_2_0()); }
		ruleAndOperand
		{ after(grammarAccess.getAndExpressionAccess().getExpression2AndOperandParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_0()); }
		ruleNotOperator
		{ after(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getExpressionComparativeExpressionParserRuleCall_1_0()); }
		ruleComparativeExpression
		{ after(grammarAccess.getNotExpressionAccess().getExpressionComparativeExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeExpressionAccess().getOperatorComparativeOperatorEnumRuleCall_1_1_0()); }
		ruleComparativeOperator
		{ after(grammarAccess.getComparativeExpressionAccess().getOperatorComparativeOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparativeExpression__Expression2Assignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparativeExpressionAccess().getExpression2AdditiveExpressionParserRuleCall_1_2_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getComparativeExpressionAccess().getExpression2AdditiveExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
		ruleAdditiveOperator
		{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Expression2Assignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getExpression2MultiplicativeExpressionParserRuleCall_1_2_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getExpression2MultiplicativeExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
		ruleMultiplicativeOperator
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Expression2Assignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpression2AtomicExpressionParserRuleCall_1_2_0()); }
		ruleAtomicExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpression2AtomicExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableReference__TableAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableReferenceAccess().getTableTableCrossReference_0()); }
		(
			{ before(grammarAccess.getTableReferenceAccess().getTableTableIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTableReferenceAccess().getTableTableIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getTableReferenceAccess().getTableTableCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnReference__ColumnAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0()); }
		(
			{ before(grammarAccess.getColumnReferenceAccess().getColumnColumnIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getColumnReferenceAccess().getColumnColumnIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
		(rule__BooleanLiteral__ValueAlternatives_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

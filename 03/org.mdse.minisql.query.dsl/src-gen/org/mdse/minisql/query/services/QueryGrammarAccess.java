/*
 * generated by Xtext 2.20.0
 */
package org.mdse.minisql.query.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QueryGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.query.Query.SelectQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cWhatColumnCrossReference_1_0 = (CrossReference)cWhatAssignment_1.eContents().get(0);
		private final RuleCall cWhatColumnIDTerminalRuleCall_1_0_1 = (RuleCall)cWhatColumnCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWhatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cWhatColumnCrossReference_2_1_0 = (CrossReference)cWhatAssignment_2_1.eContents().get(0);
		private final RuleCall cWhatColumnIDTerminalRuleCall_2_1_0_1 = (RuleCall)cWhatColumnCrossReference_2_1_0.eContents().get(1);
		private final Keyword cFROMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromTableCrossReference_4_0 = (CrossReference)cFromAssignment_4.eContents().get(0);
		private final RuleCall cFromTableIDTerminalRuleCall_4_0_1 = (RuleCall)cFromTableCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectQuery:
		//	"SELECT" what+=[schema::Column] ("," what+=[schema::Column])*
		//	"FROM" from=[schema::Table] ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" what+=[schema::Column] ("," what+=[schema::Column])* "FROM" from=[schema::Table] ";"
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//what+=[schema::Column]
		public Assignment getWhatAssignment_1() { return cWhatAssignment_1; }
		
		//[schema::Column]
		public CrossReference getWhatColumnCrossReference_1_0() { return cWhatColumnCrossReference_1_0; }
		
		//ID
		public RuleCall getWhatColumnIDTerminalRuleCall_1_0_1() { return cWhatColumnIDTerminalRuleCall_1_0_1; }
		
		//("," what+=[schema::Column])*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//what+=[schema::Column]
		public Assignment getWhatAssignment_2_1() { return cWhatAssignment_2_1; }
		
		//[schema::Column]
		public CrossReference getWhatColumnCrossReference_2_1_0() { return cWhatColumnCrossReference_2_1_0; }
		
		//ID
		public RuleCall getWhatColumnIDTerminalRuleCall_2_1_0_1() { return cWhatColumnIDTerminalRuleCall_2_1_0_1; }
		
		//"FROM"
		public Keyword getFROMKeyword_3() { return cFROMKeyword_3; }
		
		//from=[schema::Table]
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//[schema::Table]
		public CrossReference getFromTableCrossReference_4_0() { return cFromTableCrossReference_4_0; }
		
		//ID
		public RuleCall getFromTableIDTerminalRuleCall_4_0_1() { return cFromTableIDTerminalRuleCall_4_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	
	
	private final SelectQueryElements pSelectQuery;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QueryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSelectQuery = new SelectQueryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mdse.minisql.query.Query".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SelectQuery:
	//	"SELECT" what+=[schema::Column] ("," what+=[schema::Column])*
	//	"FROM" from=[schema::Table] ";";
	public SelectQueryElements getSelectQueryAccess() {
		return pSelectQuery;
	}
	
	public ParserRule getSelectQueryRule() {
		return getSelectQueryAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
